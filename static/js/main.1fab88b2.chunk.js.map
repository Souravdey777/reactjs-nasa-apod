{"version":3,"sources":["components/Apod/Apod.module.css","containers/NasaApod.module.css","assets/images/apod logo.svg","components/Apod/Apod.js","containers/NasaApod.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Apod","props","useState","x","y","XY","setXY","selectRef","React","createRef","data","title","copyright","date","url","explanation","className","style","rootAPOD","logo","src","alt","line","display","flexFlow","image","ref","transform","onMouseOut","onMouseMove","e","sxPos","nativeEvent","offsetX","current","clientWidth","syPos","offsetY","clientHeight","bind","Apodimage","NasaApod","setdata","useEffect","axios","get","then","res","catch","error","hdurl","styles","NasaAPOD","footer","textAlign","Date","getFullYear","role","aria-label","href","target","rel","developer","social_icons","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1fab88b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"rootAPOD\":\"Apod_rootAPOD__4R5EE\",\"logo\":\"Apod_logo__2Dq6E\",\"line\":\"Apod_line__1IULX\",\"bline\":\"Apod_bline__2n0t3\",\"Apod\":\"Apod_Apod__14Y3r\",\"image\":\"Apod_image__2qEXZ\",\"title\":\"Apod_title__qXvvm\",\"date\":\"Apod_date__dXMJ9\",\"explanation\":\"Apod_explanation__3y_GC\",\"Apodimage\":\"Apod_Apodimage__1hu-T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NasaAPOD\":\"NasaApod_NasaAPOD__23j3U\",\"footer\":\"NasaApod_footer__7p_zN\",\"developer\":\"NasaApod_developer__z9AQF\",\"social_icons\":\"NasaApod_social_icons__2E_er\",\"logosvg\":\"NasaApod_logosvg__3ViPd\"};","export default __webpack_public_path__ + \"static/media/apod logo.317303f0.svg\";","import React, { useState } from 'react';\r\nimport style from './Apod.module.css';\r\nimport logo from \"../../assets/images/apod logo.svg\"\r\n\r\n\r\nconst Apod = (props) => {\r\n  const [XY, setXY] = useState({\r\n    x: 0,\r\n    y: 0\r\n  })\r\n  var selectRef = React.createRef();\r\n\r\n  const _onMouseMove = (e) => {\r\n    var sxPos = (e.nativeEvent.offsetX / selectRef.current.clientWidth * 100 - 50) * 2;\r\n    var syPos = (e.nativeEvent.offsetY / selectRef.current.clientHeight * 100 - 50) * 2;\r\n    setXY({ x: (-0.1 * sxPos), y: (0.1 * syPos) })\r\n  };\r\n  const { title, copyright, date, url, explanation } = props.data\r\n  return (\r\n    <div className={style.rootAPOD}>\r\n      <img className={style.logo} src={logo} alt=\"The NASA APOD Project\" />\r\n      <div className={style.line} />\r\n      <div className={style.Apod}>\r\n        {/* <div className={style.bline} /> */}\r\n        <div className={style.title}>{title}</div>\r\n        <div className={style.date}>// {date} //</div>\r\n        <div style={{ display: \"flex\", flexFlow: \"column\" }}>\r\n          <div className={style.image} ref={selectRef}\r\n            style={{ transform: `rotateX(${XY.x}deg) rotateY(${XY.y}deg)` }}\r\n            onMouseOut={() => setXY({ x: 0, y: 0 })}\r\n            onMouseMove={_onMouseMove.bind(this)} >\r\n            <img className={style.Apodimage} alt={title} src={url} />\r\n          </div>\r\n          <div>// {copyright} //</div>\r\n          <div className={style.explanation}>{explanation}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Apod;","import React, { useEffect, useState } from 'react';\r\nimport styles from './NasaApod.module.css';\r\nimport axios from 'axios';\r\nimport Apod from '../components/Apod/Apod';\r\n\r\nconst NasaApod = () => {\r\n\r\n  const [data, setdata] = useState();\r\n\r\n  useEffect(() => {\r\n    if (!data)\r\n      axios\r\n        .get(`https://api.nasa.gov/planetary/apod?api_key=xU3CMrS3nNgv0djoupzpT1078bczKb8CPqYyZAZN`)\r\n        // .get(`https://api.nasa.gov/planetary/apod?api_key=${process.env.APOD_KEY}`)\r\n        .then(res => {\r\n          setdata(res.data)\r\n\r\n        })\r\n        .catch(error => { setdata({ title: \"Hi this is a dummy text for Title\", date: 20, hdurl: \"https://media.istockphoto.com/vectors/starry-sky-seamless-pattern-white-and-blue-dots-in-galaxy-and-stars-vector-id904278188?b=1&k=6&m=904278188&s=612x612&w=0&h=hUSezsk0k49FT7m14ClXGEX07PpT8_cg4dMVck2F1cM=\", explanation: \"kjhkfhioehf\" }) })\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {data ?\r\n        <div className={styles.NasaAPOD}>\r\n          <Apod data={data} />\r\n          <footer className={styles.footer}>\r\n              <div style={{textAlign:\"left\"}}>\r\n                <b>© {new Date().getFullYear()} The NASA APOD Project</b>\r\n                <div>This Project is powered by NASA Astronomy Picture of the Day</div>\r\n              </div>\r\n              <div>\r\n                Developed with{\" \"}\r\n                <span role=\"img\" aria-label=\"fire\">\r\n                  ❤️\r\n            </span>{\" \"}\r\n            by{\" \"}\r\n                <a\r\n                  href=\"https://github.com/Souravdey777/\"\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                  className={styles.developer}\r\n                >\r\n                  @Souravdey777\r\n            </a>\r\n                <br />\r\n                <div className={styles.social_icons}>\r\n                  <a\r\n                    href=\"https://github.com/Souravdey777/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <i className=\"fab fa-github\"></i>\r\n                  </a>\r\n                  <a\r\n                    href=\"https://www.linkedin.com/in/souravdey777/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <i className=\"fab fa-linkedin\"></i>\r\n                  </a>\r\n                  <a\r\n                    href=\"https://twitter.com/Souravdey777/\"\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                  >\r\n                    <i className=\"fab fa-twitter\"></i>\r\n                  </a>\r\n                </div>\r\n              </div>\r\n          </footer>\r\n        </div>\r\n        : <div />}\r\n    </>\r\n  );\r\n\r\n}\r\n\r\nexport default NasaApod;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport NasaApod from './containers/NasaApod';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <NasaApod/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}